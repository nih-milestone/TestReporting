name: Create artifact summary

description: "Creates a job summary with Nexus links to the produced artifacts"

inputs:
  branch-name:
    type: string
    required: true
  is-full-build:
    type: boolean
    required: true
  build-version:
    type: string
    required: true
  solution:
    type: string
    required: true
  installers-path:
    type: string
    required: true      
  installers-base-url:
    type: string
    required: true  
  symbols-base-url:
    type: string
    required: true
  symbols-path:
    type: string
    required: true
  documentation-base-url:
    type: string
    required: true
  documentation-path:
    type: string
    required: true        
  warn-if-empty:
    type: boolean
    required: false
    default: true  

runs:
  using: "composite"
  steps:
    - name: Create summary
      shell: pwsh
      run: |
        $Summary = "### Version ${{ inputs.build-version }}"
        $Summary = $Summary + "`nBranch: **${{ inputs.branch-name }}**"
        $Summary = $Summary + "`nBuild type: **${{ inputs.is-full-build == 'true' && 'Full' || 'Partial' }}** - ${{ inputs.solution }}"
        $Summary = $Summary + "`nRelease metadata: ${{ inputs.installers-base-url }}/RELEASE-metadata.json"
        $Summary = $Summary + "`nChangelog: ${{ inputs.installers-base-url }}/CHANGELOG.md"
        $Summary = $Summary + "`nSymbol Server: ${{ inputs.symbols-base-url }}/_SymbolServer"

        if ((Get-ChildItem -Path "${{ inputs.installers-path }}" -Force | Measure-Object).Count -gt 0)
        {
          $Summary = $Summary + "<br/><br/><details open><summary><b>Installers</b></summary>"
          Get-ChildItem -Path "${{ inputs.installers-path }}" | ForEach-Object {
            $Component = $_.Name.Replace("Installers.zip", "");
            $Filename = $_.Name

            $Summary = $Summary + "`n`n<i>$Component</i>"
            $Summary = $Summary + "`n${{ inputs.installers-base-url }}/$Component/$Filename"
          }
          $Summary = $Summary + "`n</details>"
        }
        elseif ("${{ inputs.warn-if-empty }}" -eq "true")
        {
          echo "::warning title=No installer artifacts::No installer artifacts where produced by this build"
        }

        if ((Get-ChildItem -Path "${{ inputs.symbols-path }}" -Force | Measure-Object).Count -gt 0)
        {
          $Summary = $Summary + "<br/><br/><details open><summary><b>Symbols</b></summary>"

          Get-ChildItem -Path "${{ inputs.symbols-path }}" | ForEach-Object {
            $Component = $_.Name.Replace("Symbols.zip", "");
            $Filename = $_.Name

            $Summary = $Summary + "`n`n<i>$Component</i>"
            $Summary = $Summary + "`n${{ inputs.symbols-base-url }}/$Component/$Filename"
          }
          $Summary = $Summary + "`n</details>"
        }
        elseif ("${{ inputs.warn-if-empty }}" -eq "true")
        {
          echo "::warning title=No symbols artifacts::No symbols artifacts where produced by this build"
        }

        if ((Get-ChildItem -Path "${{ inputs.documentation-path }}" -Force | Measure-Object).Count -gt 0)
        {
          $Summary = $Summary + "<br/><br/><details open><summary><b>Documentation</b></summary>"

          Get-ChildItem -Path "${{ inputs.documentation-path }}" | ForEach-Object {
            $Component = $_.Name.Replace("Documentation.zip", "");
            $Filename = $_.Name

            $Summary = $Summary + "`n`n<i>$Component</i>"
            $Summary = $Summary + "`n${{ inputs.documentation-base-url }}/$Component/$Filename"
          }
          $Summary = $Summary + "`n</details>"
        }
        elseif ("${{ inputs.warn-if-empty }}" -eq "true")
        {
          echo "::warning title=No documentation artifacts::No documentation artifacts where produced by this build"
        }

        echo "$Summary" >> $env:GITHUB_STEP_SUMMARY

        